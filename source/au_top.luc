module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig dipswitch[4][5];
  value_store valuestorer;
  
  edge_detector compDetect (#RISE(1) , #FALL(0), .clk(clk));
  button_conditioner compCond (.clk(clk) , .in(io_button[0]));
  
  edge_detector errorDetect (#RISE(1), #FALL(0), .clk(clk));
  button_conditioner errorCond (.clk(clk), .in(io_button[1]));
  
  edge_detector rstDetect (#RISE(1), #FALL(0), .clk(clk));
  button_conditioner rstCond (.clk(clk), .in(io_button[2]));
  
  const CLKSPEED = 26;
  dff counter[CLKSPEED](.clk(clk),.rst(rst));
  
  // Instantiate alu 
  alu myalu; 
  //lk(counter.q[CLKSPEED-1]){
    //m auto_tester(.rst(rst))={IDLE,ADD,OR,ERROR,END};
  //
  
  auto_tester autotester(.clk(clk), .rst(rst), .restart(io_button[1]));
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    reset_conditioner reset_cond;
    .rst(rst){
      multi_seven_seg seg;
      fsm state(.clk(clk), .rst(rst)) = {IDLE, ADD, NORMAL, FAIL,AUTO};
    }
  }
  
  always {
    
    counter.d = counter.q+1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    compDetect.in = compCond.out;
    errorDetect.in = errorCond.out;
    rstDetect.in = rstCond.out;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
  
    io_led = 3x{{8h00}};    // turn LEDs off

    // seg.values = {5h0,5h0,5h0,5h0};
    io_seg = ~seg.seg;      // connect segments to the driver
    io_sel = ~seg.sel;      // connect digit select to the driver
     
    valuestorer.clk = clk;
    valuestorer.btna = io_button[3];
    valuestorer.btnb = io_button[4];
    valuestorer.values[7:0] = io_dip[0];
    valuestorer.values[15:8] = io_dip[1];
    
    valuestorer.rst = rstDetect.out; 
    
    myalu.alufn_signal = io_dip[2][5:0];
    myalu.a = valuestorer.outA; 
    myalu.b = valuestorer.outB; 
    
    
    //io_led[0][7:0] = valuestorer.outA[7:0];
    //io_led[1][7:0] = valuestorer.outA[15:8];
    //io_led[0][7:0] = valuestorer.outB[7:0];
    //io_led[1][7:0] = valuestorer.outB[15:8];
    
    io_led[2][5:0] = io_dip[2][5:0];
    
    //io_led[0][7:0] = myalu.out[7:0];
    //io_led[1][7:0] = myalu.out[15:8];
    case(state.q){
      state.IDLE:
        seg.values = {5h1,5d14,5d13,5d17};
        io_led[1] = 8h00;
        io_led[0] = 8h00;
        //io_led[1] = myalu.out[15:8];
        //io_led[0] = myalu.out[7:0];     
            
        if(errorDetect.out){
          state.d = state.ADD;
        }
        if(compDetect.out){
          state.d = state.NORMAL;
        }
      state.NORMAL:
        io_led[1] = myalu.out[15:8];
        io_led[0] = myalu.out[7:0];
        case(io_dip[2][5:0]){
          6b000000: dipswitch = {5d11,5d14,5d14,5d30}; //add
          6b000001: dipswitch = {5d5, 5d16, 5d20, 5d30}; //sub
          6b000010: dipswitch = {5d15,5d15,5d16,5d13};  // mult
          6b011000: dipswitch = {5d11,5d15,5d14,5d30}; // and
          6b011001: dipswitch = {5d15, 5d11, 5d15, 5d14}; //nand
          6b011110: dipswitch = {5d0,5d18,5d30,5d30}; //or
          6b011111: dipswitch = {5d15, 5d0, 5d18, 5d30}; // nor
          6b010110: dipswitch = {5d19, 5d0, 5d18, 5d30}; // xor
          6b010111: dipswitch = {5d19, 5d15, 5d0, 5d18}; // xnor
          6b011010: dipswitch = {5d11, 5d30, 5d30, 5d30}; // A
          6b100000: dipswitch = {5d5,5d19,5d13,5d30}; //SHL
          6b100001: dipswitch =  {5d5, 5d19, 5d18, 5d30}; //SHR
          6b100011: dipswitch = {5d5, 5d18, 5d11, 5d30}; //SRA
          6b110011: dipswitch = {5d21,5d17,5d9,5d30}; //CMPEQ
          6b110101: dipswitch = {5d21, 5d17, 5d30, 5d30}; //CMPLT
          6b110111: dipswitch = {5d21, 5d13, 5d17, 5d30}; //CMPLE
          default: dipswitch = {5d14,5d17,5d10,5d30}; //default
        } 
        case(myalu.zvn[1]){
          0:seg.values=dipswitch;
          1:seg.values={5d0,5d16,5d17,5d18};
          default: seg.values=dipswitch;
        }
        if (rstDetect.out) {
          state.d = state.IDLE;
        }
        if (compDetect.out){
          state.d = state.AUTO;
        }
        if(errorDetect.out){
          state.d = state.ADD;
        }
      state.ADD:
        io_led[0] = myalu.out[7:0]+1;
        state.d = state.FAIL;
        
      state.FAIL:
        io_led[1] = myalu.out[15:8];
        io_led[0] = myalu.out[7:0]+1;
        seg.values = {5ha,5hb,5hc,5hd};
        if(compDetect.out){
          state.d = state.NORMAL;
        }
        if (rstDetect.out) {
          state.d = state.IDLE;
        }
      state.AUTO:
          //seg.values = {4h5,4hf,4hf,4h3};
          seg.values = autotester.out;
          
          if (rstDetect.out) {
           state.d = state.IDLE; 
          }
  }
}